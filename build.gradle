buildscript {
    ext.kotlin_version = '1.6.10'
    ext.kotlin_coroutines_version = '1.5.2'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id("org.ec4j.editorconfig") version "0.0.3"
}

editorconfig {
    excludes = ['external/**', 'metadata/**', '**/*.webp']
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

project(':external:calendar') {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 31
        buildToolsVersion '31.0.0'

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
            }

        }

        lintOptions {
            abortOnError false
        }
    }
}

project(':external:colorpicker') {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 31
        buildToolsVersion '31.0.0'

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
            }
        }

        lintOptions {
            abortOnError false
        }
    }
}

project(':external:timezonepicker') {
    apply plugin: 'com.android.library'

    dependencies {
        implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    }

    android {
        compileSdkVersion 31
        buildToolsVersion '31.0.0'

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
            }
        }

        lintOptions {
            abortOnError false
        }
    }
}

project(':external:chips') {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 31
        buildToolsVersion '31.0.0'

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
            }
        }


        lintOptions {
            abortOnError false
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'com.google.android.material:material:1.4.0'

    implementation project(':external:calendar')
    implementation project(':external:colorpicker')
    implementation project(':external:timezonepicker')
    implementation project(':external:chips')
}

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 29
        versionName "1.0.27"
        applicationId "ws.xsoh.etar"
    }

    useLibrary 'org.apache.http.legacy'

    sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src', 'external/ex/common/java'] // NOTE: this includes external/ex/common/java!
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
        }
    }

    buildTypes {
        release {
            // TODO: could be enabled for ProGuard minimization
            minifyEnabled false
            resValue "string", "search_authority", defaultConfig.applicationId + '.CalendarRecentSuggestionsProvider'
        }

        debug {
            minifyEnabled false

            applicationIdSuffix ".debug"
            resValue "string", "search_authority", defaultConfig.applicationId + '.debug.CalendarRecentSuggestionsProvider'
        }
    }

    buildFeatures {
        viewBinding true
    }

    /*
     * To sign release build, create file gradle.properties in ~/.gradle/ with this content:
     *
     * signingStoreLocation=/home/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found sign properties in gradle.properties! Signing buildâ€¦"

        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}
