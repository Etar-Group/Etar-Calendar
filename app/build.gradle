
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.ec4j.editorconfig'
}

editorconfig {
    excludes = ['external/**', 'metadata/**', '**/*.webp']
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 34
        versionName "1.0.34"
        applicationId "ws.xsoh.etar"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    sourceSets {
        main.java.srcDirs += '../external/ex/common/java'
    }

    buildTypes {
        release {
            // TODO: could be enabled for ProGuard minimization
            minifyEnabled false
            resValue "string", "search_authority", defaultConfig.applicationId + '.CalendarRecentSuggestionsProvider'
        }

        debug {
            minifyEnabled false

            applicationIdSuffix ".debug"
            resValue "string", "search_authority", defaultConfig.applicationId + '.debug.CalendarRecentSuggestionsProvider'
        }
    }

    buildFeatures {
        viewBinding true
    }

    /*
     * To sign release build, create file gradle.properties in ~/.gradle/ with this content:
     *
     * signingStoreLocation=/home/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found sign properties in gradle.properties! Signing buildâ€¦"

        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    lint {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {

    // Core
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.google.android.material:material:1.5.0'
    testImplementation 'junit:junit:4.13.2'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.8'

    // Coroutines
    def coroutines_version = "1.6.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

}

preBuild.dependsOn (":aarGen")
